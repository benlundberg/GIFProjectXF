// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using GifProjectXF.Core;
//
//    var trendingGif = TrendingGif.FromJson(jsonString);

namespace GifProjectXF.Core
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TrendingGif
    {
        [JsonProperty("data")]
        public List<Datum> Data { get; set; }

        [JsonProperty("pagination")]
        public Pagination Pagination { get; set; }

        [JsonProperty("meta")]
        public Meta Meta { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("bitly_gif_url")]
        public Uri BitlyGifUrl { get; set; }

        [JsonProperty("bitly_url")]
        public Uri BitlyUrl { get; set; }

        [JsonProperty("embed_url")]
        public Uri EmbedUrl { get; set; }

        [JsonProperty("username")]
        public string Username { get; set; }

        [JsonProperty("source")]
        public SourceUnion Source { get; set; }

        [JsonProperty("content_url")]
        public string ContentUrl { get; set; }

        [JsonProperty("images")]
        public Images Images { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("user", NullValueHandling = NullValueHandling.Ignore)]
        public User User { get; set; }
    }

    public partial class Images
    {
        [JsonProperty("fixed_height_still")]
        public The480_WStill FixedHeightStill { get; set; }

        [JsonProperty("original_still")]
        public The480_WStill OriginalStill { get; set; }

        [JsonProperty("fixed_width")]
        public FixedHeight FixedWidth { get; set; }

        [JsonProperty("fixed_height_small_still")]
        public The480_WStill FixedHeightSmallStill { get; set; }

        [JsonProperty("fixed_height_downsampled")]
        public FixedHeight FixedHeightDownsampled { get; set; }

        [JsonProperty("preview")]
        public The4_K Preview { get; set; }

        [JsonProperty("fixed_height_small")]
        public FixedHeight FixedHeightSmall { get; set; }

        [JsonProperty("downsized_still")]
        public The480_WStill DownsizedStill { get; set; }

        [JsonProperty("downsized")]
        public The480_WStill Downsized { get; set; }

        [JsonProperty("downsized_large")]
        public The480_WStill DownsizedLarge { get; set; }

        [JsonProperty("fixed_width_small_still")]
        public The480_WStill FixedWidthSmallStill { get; set; }

        [JsonProperty("preview_webp")]
        public The480_WStill PreviewWebp { get; set; }

        [JsonProperty("fixed_width_still")]
        public The480_WStill FixedWidthStill { get; set; }

        [JsonProperty("fixed_width_small")]
        public FixedHeight FixedWidthSmall { get; set; }

        [JsonProperty("downsized_small")]
        public The4_K DownsizedSmall { get; set; }

        [JsonProperty("fixed_width_downsampled")]
        public FixedHeight FixedWidthDownsampled { get; set; }

        [JsonProperty("downsized_medium")]
        public The480_WStill DownsizedMedium { get; set; }

        [JsonProperty("original")]
        public FixedHeight Original { get; set; }

        [JsonProperty("fixed_height")]
        public FixedHeight FixedHeight { get; set; }

        [JsonProperty("looping")]
        public Looping Looping { get; set; }

        [JsonProperty("original_mp4")]
        public The4_K OriginalMp4 { get; set; }

        [JsonProperty("preview_gif")]
        public The480_WStill PreviewGif { get; set; }

        [JsonProperty("480w_still")]
        public The480_WStill The480WStill { get; set; }

        [JsonProperty("4k", NullValueHandling = NullValueHandling.Ignore)]
        public The4_K The4K { get; set; }

        [JsonProperty("hd", NullValueHandling = NullValueHandling.Ignore)]
        public The4_K Hd { get; set; }
    }

    public partial class The480_WStill
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("width")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Width { get; set; }

        [JsonProperty("height")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Height { get; set; }

        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Size { get; set; }
    }

    public partial class The4_K
    {
        [JsonProperty("width")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Width { get; set; }

        [JsonProperty("height")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Height { get; set; }

        [JsonProperty("mp4")]
        public Uri Mp4 { get; set; }

        [JsonProperty("mp4_size")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Mp4Size { get; set; }
    }

    public partial class FixedHeight
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("width")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Width { get; set; }

        [JsonProperty("height")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Height { get; set; }

        [JsonProperty("size")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Size { get; set; }

        [JsonProperty("mp4", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Mp4 { get; set; }

        [JsonProperty("mp4_size", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Mp4Size { get; set; }

        [JsonProperty("webp")]
        public Uri Webp { get; set; }

        [JsonProperty("webp_size")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long WebpSize { get; set; }

        [JsonProperty("frames", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Frames { get; set; }

        [JsonProperty("hash", NullValueHandling = NullValueHandling.Ignore)]
        public string Hash { get; set; }
    }

    public partial class Looping
    {
        [JsonProperty("mp4")]
        public Uri Mp4 { get; set; }

        [JsonProperty("mp4_size")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Mp4Size { get; set; }
    }

    public partial class User
    {
        [JsonProperty("avatar_url")]
        public Uri AvatarUrl { get; set; }

        [JsonProperty("banner_url")]
        public string BannerUrl { get; set; }

        [JsonProperty("banner_image", NullValueHandling = NullValueHandling.Ignore)]
        public Uri BannerImage { get; set; }

        [JsonProperty("profile_url")]
        public Uri ProfileUrl { get; set; }

        [JsonProperty("username")]
        public string Username { get; set; }

        [JsonProperty("display_name")]
        public string DisplayName { get; set; }

        [JsonProperty("is_verified")]
        public bool IsVerified { get; set; }
    }

    public partial class Meta
    {
        [JsonProperty("status")]
        public long Status { get; set; }

        [JsonProperty("msg")]
        public string Msg { get; set; }

        [JsonProperty("response_id")]
        public string ResponseId { get; set; }
    }

    public partial class Pagination
    {
        [JsonProperty("total_count")]
        public long TotalCount { get; set; }

        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("offset")]
        public long Offset { get; set; }
    }

    public enum Rating { G };

    public enum SourceEnum { Empty, RKpopgfysComments9BgzpdIreneCuteDetective, YouTubeComFallonTonight };

    public enum TypeEnum { Gif };

    public partial struct SourceUnion
    {
        public SourceEnum? Enum;
        public Uri PurpleUri;

        public static implicit operator SourceUnion(SourceEnum Enum) => new SourceUnion { Enum = Enum };
        public static implicit operator SourceUnion(Uri PurpleUri) => new SourceUnion { PurpleUri = PurpleUri };
    }

    public partial class TrendingGif
    {
        public static TrendingGif FromJson(string json) => JsonConvert.DeserializeObject<TrendingGif>(json, GifProjectXF.Core.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TrendingGif self) => JsonConvert.SerializeObject(self, GifProjectXF.Core.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                RatingConverter.Singleton,
                SourceUnionConverter.Singleton,
                SourceEnumConverter.Singleton,
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class RatingConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Rating) || t == typeof(Rating?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            return Rating.G;
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Rating)untypedValue;
            if (value == Rating.G)
            {
                serializer.Serialize(writer, "g");
                return;
            }
            throw new Exception("Cannot marshal type Rating");
        }

        public static readonly RatingConverter Singleton = new RatingConverter();
    }

    internal class SourceUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SourceUnion) || t == typeof(SourceUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "":
                            return new SourceUnion { Enum = SourceEnum.Empty };
                        case "/r/kpopgfys/comments/9bgzpd/irene_cute_detective/":
                            return new SourceUnion { Enum = SourceEnum.RKpopgfysComments9BgzpdIreneCuteDetective };
                        case "YouTube.com/FallonTonight":
                            return new SourceUnion { Enum = SourceEnum.YouTubeComFallonTonight };
                    }
                    try
                    {
                        var uri = new Uri(stringValue);
                        return new SourceUnion { PurpleUri = uri };
                    }
                    catch (UriFormatException) { }
                    break;
            }

            return new SourceUnion { Enum = SourceEnum.Empty };
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (SourceUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case SourceEnum.Empty:
                        serializer.Serialize(writer, "");
                        return;
                    case SourceEnum.RKpopgfysComments9BgzpdIreneCuteDetective:
                        serializer.Serialize(writer, "/r/kpopgfys/comments/9bgzpd/irene_cute_detective/");
                        return;
                    case SourceEnum.YouTubeComFallonTonight:
                        serializer.Serialize(writer, "YouTube.com/FallonTonight");
                        return;
                }
            }
            if (value.PurpleUri != null)
            {
                serializer.Serialize(writer, value.PurpleUri.ToString());
                return;
            }
            throw new Exception("Cannot marshal type SourceUnion");
        }

        public static readonly SourceUnionConverter Singleton = new SourceUnionConverter();
    }

    internal class SourceEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SourceEnum) || t == typeof(SourceEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return SourceEnum.Empty;
                case "/r/kpopgfys/comments/9bgzpd/irene_cute_detective/":
                    return SourceEnum.RKpopgfysComments9BgzpdIreneCuteDetective;
                case "YouTube.com/FallonTonight":
                    return SourceEnum.YouTubeComFallonTonight;
            }
            throw new Exception("Cannot unmarshal type SourceEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SourceEnum)untypedValue;
            switch (value)
            {
                case SourceEnum.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case SourceEnum.RKpopgfysComments9BgzpdIreneCuteDetective:
                    serializer.Serialize(writer, "/r/kpopgfys/comments/9bgzpd/irene_cute_detective/");
                    return;
                case SourceEnum.YouTubeComFallonTonight:
                    serializer.Serialize(writer, "YouTube.com/FallonTonight");
                    return;
            }
            throw new Exception("Cannot marshal type SourceEnum");
        }

        public static readonly SourceEnumConverter Singleton = new SourceEnumConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "gif")
            {
                return TypeEnum.Gif;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            if (value == TypeEnum.Gif)
            {
                serializer.Serialize(writer, "gif");
                return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
